"""
PDF Reporting Module
--------------------

Provides functionality to generate structured PDF reports combining quantitative
portfolio risk metrics (e.g., VaR, ES, option positions) with interpretive text,
generated by a local LLM (e.g., via LM Studio).

This module is the final step in the risk pipeline — producing clean, formatted
outputs for clients, stakeholders, or internal documentation. Tables are styled
for clarity, and text is formatted using ReportLab components.

Usage Instructions
------------------
1. Ensure the ReportLab library is installed (`pip install reportlab`)
2. Call `save_report_as_pdf()` with:
   - a dict of metrics (e.g., {"VaR_95%": ..., "ES_99%": ...})
   - a Series of portfolio weights (for traceability)
   - a string containing LLM-generated interpretation
   - (optional) a list of options positions
   - a filename (defaults to "interpretation_report.pdf")

Authors
-------
Niccolò Lecce, Alessandro Dodon, Marco Gasparetti

Created
-------
May 2025

Contents
--------
- save_report_as_pdf: Generate and export a complete PDF report for portfolio risk analysis
"""


#----------------------------------------------------------
# Packages
#----------------------------------------------------------
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.units import cm
from reportlab.lib import colors
import os, sys
import datetime
import pandas as pd
import subprocess
from reportlab.platypus import Image
from io import BytesIO


#----------------------------------------------------------
# PDF Report Generation
#----------------------------------------------------------
def save_report_as_pdf(metrics: dict,
                       weights: pd.Series,
                       interpretation: str,
                       opt_list: list,
                       filename: str = "interpretation_report.pdf"):
    """
    Main
    ----
    Generates a client-ready PDF report including:
    - VaR (Value at Risk) metrics
    - ES (Expected Shortfall) metrics
    - Option positions (if any)
    - Interpretation text produced by a local LLM

    Layout is structured for clarity and readability, with appropriate tables
    and paragraph formatting.

    Parameters
    ----------
    metrics : dict
        Dictionary containing computed risk metrics (e.g., 'VaR_95%', 'ES_95%').
    weights : pd.Series
        Series with asset weights or monetary exposures. (Not displayed, but retained for traceability.)
    interpretation : str
        Plain-text explanation or summary generated by an LLM (e.g., Qwen via LM Studio).
    opt_list : list
        List of dictionaries describing option positions. Each dict should contain:
        - 'type': str (e.g., 'call', 'put')
        - 'under': str (underlying asset)
        - 'qty': float (contract quantity)
        - 'K': float (strike price)
        - 'T': float (maturity in years)
    filename : str, optional
        Desired filename for the output PDF. Default is "interpretation_report.pdf".

    Returns
    -------
    None
        Saves the PDF file to disk.

    Notes
    -----
    - This function uses ReportLab and requires it to be installed (`pip install reportlab`).
    - All formatting (fonts, alignment, spacing) is handled internally.
    - If `opt_list` is empty, the Options section is skipped.
    """
    # Document setup
    doc = SimpleDocTemplate(
        filename, pagesize=A4,
        rightMargin=2 * cm, leftMargin=2 * cm,
        topMargin=2 * cm, bottomMargin=2 * cm
    )

    # Define styles
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle("RptTitle",
                              fontName="Times-Roman",
                              fontSize=24,
                              alignment=TA_CENTER,
                              spaceAfter=12))
    styles.add(ParagraphStyle("SectHead",
                              fontName="Times-Roman",
                              fontSize=18,
                              spaceAfter=6))
    styles.add(ParagraphStyle("BodyTxt",
                              fontName="Times-Roman",
                              fontSize=12,
                              leading=14,
                              spaceAfter=4))

    story = []

    # — Cover page title
    story.append(Paragraph("Interpretation Report", styles["RptTitle"]))
    story.append(Paragraph(f"Date: {datetime.date.today():%d %B %Y}", styles["BodyTxt"]))
    story.append(Spacer(1, 0.7 * cm))

    # — VaR table
    story.append(Paragraph("VaR Metrics (95%)", styles["SectHead"]))
    story.append(Spacer(1, 0.5 * cm))
    data_var = [["Metric", "Value"]]
    for k, v in metrics.items():
        if "VaR" in k and "ES" not in k:
            data_var.append([k, f"{v:,.2f}"])
    tbl_var = Table(data_var, colWidths=[8 * cm, 6 * cm])
    tbl_var.setStyle(TableStyle([
        ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
        ("ALIGN", (1, 1), (-1, -1), "RIGHT"),
        ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
        ("FONTNAME", (0, 0), (-1, -1), "Times-Roman"),
    ]))
    story.append(tbl_var)
    story.append(Spacer(1, 0.7 * cm))

    # — ES table
    story.append(Paragraph("ES Metrics (95%)", styles["SectHead"]))
    story.append(Spacer(1, 0.5 * cm))
    data_es = [["Metric", "Value"]]
    for k, v in metrics.items():
        if "ES" in k:
            data_es.append([k, f"{v:,.2f}"])
    tbl_es = Table(data_es, colWidths=[8 * cm, 6 * cm])
    tbl_es.setStyle(TableStyle([
        ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
        ("ALIGN", (1, 1), (-1, -1), "RIGHT"),
        ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
        ("FONTNAME", (0, 0), (-1, -1), "Times-Roman"),
    ]))
    story.append(tbl_es)
    story.append(Spacer(1, 0.7 * cm))

    # — Option positions (if available)
    if opt_list:
        story.append(Paragraph("Option Positions", styles["SectHead"]))
        story.append(Spacer(1, 0.5 * cm))
        data_opts = [["Type", "Underlying", "Quantity", "Strike", "Maturity (y)"]]
        for op in opt_list:
            data_opts.append([
                op['type'].upper(),
                op['under'],
                f"{op['qty']:.0f}",
                f"{op['K']:.2f}",
                f"{op['T']:.2f}"
            ])
        tbl_opts = Table(data_opts, colWidths=[3 * cm, 3 * cm, 3 * cm, 4 * cm, 3 * cm])
        tbl_opts.setStyle(TableStyle([
            ("BACKGROUND", (0, 0), (-1, 0), colors.lightgrey),
            ("ALIGN", (2, 1), (-1, -1), "RIGHT"),
            ("GRID", (0, 0), (-1, -1), 0.5, colors.grey),
            ("FONTNAME", (0, 0), (-1, -1), "Times-Roman"),
        ]))
        story.append(tbl_opts)
        story.append(Spacer(1, 0.7 * cm))

    # — LLM Interpretation section
    story.append(Paragraph("LLM Interpretation", styles["SectHead"]))
    for para in interpretation.split("\n\n"):
        story.append(Paragraph(para.replace("\n", " "), styles["BodyTxt"]))
        story.append(Spacer(1, 0.3 * cm))

    # — Footer with page number
    def footer(canvas, doc):
        canvas.saveState()
        canvas.setFont("Times-Roman", 8)
        canvas.setFillColor("grey")
        canvas.drawCentredString(A4[0] / 2, 1 * cm,
                                 f"Page {doc.page} — Confidential")
        canvas.restoreState()

    # Build PDF
    doc.build(story, onFirstPage=footer, onLaterPages=footer)
    print(f"PDF report generated: {os.path.abspath(filename)}")




import tempfile
from reportlab.lib.pagesizes import A4
# … all your other imports …

def open_report_as_pdf(metrics,
                       weights,
                       interpretation,
                       opt_list,
                       backtest_results,
                       static_figs = None):
    """
    Builds the PDF into a temp file, then launches it in the default viewer.
    """
     # 1) Create a temporary PDF file
    fd, tmp_path = tempfile.mkstemp(suffix=".pdf")
    os.close(fd)

    # 2) Set up the document
    doc = SimpleDocTemplate(
        tmp_path, pagesize=A4,
        rightMargin=2*cm, leftMargin=2*cm,
        topMargin=2*cm, bottomMargin=2*cm
    )

    # 3) Define styles
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle("RptTitle", fontName="Times-Roman", fontSize=24,
                              alignment=TA_CENTER, spaceAfter=12))
    styles.add(ParagraphStyle("SectHead", fontName="Times-Roman", fontSize=18,
                              spaceAfter=6))
    styles.add(ParagraphStyle("BodyTxt", fontName="Times-Roman", fontSize=12,
                              leading=14, spaceAfter=4))

    # 4) Build the story
    story = []

    # — Cover page
    story.append(Paragraph("Interpretation Report", styles["RptTitle"]))
    story.append(Paragraph(f"Date: {datetime.date.today():%d %B %Y}", styles["BodyTxt"]))
    story.append(Spacer(1, 0.7*cm))

    # — VaR table
    story.append(Paragraph("VaR Metrics", styles["SectHead"]))
    story.append(Spacer(1, 0.5*cm))
    data_var = [["Metric", "Value"]]
    for k, v in metrics.items():
        if "VaR" in k and "ES" not in k:
            data_var.append([k, f"{v:,.2f}"])
    tbl_var = Table(data_var, colWidths=[8*cm, 6*cm])
    tbl_var.setStyle(TableStyle([
        ("BACKGROUND", (0,0), (-1,0), colors.lightgrey),
        ("ALIGN", (1,1), (-1,-1), "RIGHT"),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
        ("FONTNAME", (0,0), (-1,-1), "Times-Roman"),
    ]))
    story.append(tbl_var)
    story.append(Spacer(1, 0.7*cm))

    # — ES table
    story.append(Paragraph("ES Metrics", styles["SectHead"]))
    story.append(Spacer(1, 0.5*cm))
    data_es = [["Metric", "Value"]]
    for k, v in metrics.items():
        if "ES" in k:
            data_es.append([k, f"{v:,.2f}"])
    tbl_es = Table(data_es, colWidths=[8*cm, 6*cm])
    tbl_es.setStyle(TableStyle([
        ("BACKGROUND", (0,0), (-1,0), colors.lightgrey),
        ("ALIGN", (1,1), (-1,-1), "RIGHT"),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
        ("FONTNAME", (0,0), (-1,-1), "Times-Roman"),
    ]))
    story.append(tbl_es)
    story.append(Spacer(1, 0.7*cm))

    # — Option positions
    if opt_list:
        story.append(Paragraph("Option Positions", styles["SectHead"]))
        story.append(Spacer(1, 0.5*cm))
        data_opts = [["Type", "Underlying", "Quantity", "Strike", "Maturity (y)"]]
        for op in opt_list:
            data_opts.append([
                op["type"].upper(),
                op["under"],
                f"{op['qty']:.0f}",
                f"{op['K']:.2f}",
                f"{op['T']:.2f}"
            ])
        tbl_opts = Table(data_opts, colWidths=[3*cm,3*cm,3*cm,4*cm,3*cm])
        tbl_opts.setStyle(TableStyle([
            ("BACKGROUND", (0,0), (-1,0), colors.lightgrey),
            ("ALIGN", (2,1), (-1,-1), "RIGHT"),
            ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
            ("FONTNAME", (0,0), (-1,-1), "Times-Roman"),
        ]))
        story.append(tbl_opts)
        story.append(Spacer(1, 0.7*cm))

        # — Backtest Results table
    story.append(Paragraph("Backtest Results", styles["SectHead"]))
    story.append(Spacer(1, 0.5*cm))

    # create a header style that centers and wraps
    hdr_style = ParagraphStyle(
        "hdr", parent=styles["BodyTxt"],
        alignment=TA_CENTER,
        leading=12
    )

    # header row as Paragraphs with explicit line‐breaks
    headers = [
        Paragraph("Model", hdr_style),
        Paragraph("Violations", hdr_style),
        Paragraph("Violation Rate", hdr_style),
        Paragraph("Kupiec\np-value", hdr_style),
        Paragraph("Christoffersen\np-value", hdr_style),
        Paragraph("Joint\np-value", hdr_style)
    ]

    data_bt = [headers]
    for model, row in backtest_results.iterrows():
        data_bt.append([
            model,
            str(int(row["Violations"])),
            f"{row['Violation Rate']:.3f}",
            f"{row['Kupiec p-value']:.3f}",
            f"{row['Christoffersen p-value']:.3f}",
            f"{row['Joint p-value']:.3f}"
        ])

    # narrower columns for the long names
    col_widths = [4*cm, 2*cm, 3*cm, 2.5*cm, 3*cm, 2.5*cm]

    tbl_bt = Table(data_bt, colWidths=col_widths)
    tbl_bt.setStyle(TableStyle([
        ("BACKGROUND", (0,0), (-1,0), colors.lightgrey),
        ("ALIGN", (1,1), (-1,-1), "RIGHT"),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
        ("FONTNAME", (0,0), (-1,-1), "Times-Roman"),
    ]))
    story.append(tbl_bt)
    story.append(Spacer(1, 0.7*cm))

    # — LLM Interpretation
    story.append(Paragraph("LLM Interpretation", styles["SectHead"]))
    for para in interpretation.split("\n\n"):
        story.append(Paragraph(para.replace("\n", " "), styles["BodyTxt"]))
        story.append(Spacer(1, 0.3*cm))

    # — Footer callback
    def footer(canvas, doc):
        canvas.saveState()
        canvas.setFont("Times-Roman", 8)
        canvas.setFillColor("grey")
        canvas.drawCentredString(A4[0]/2, 1*cm,
                                 f"Page {doc.page} — Confidential")
        canvas.restoreState()


    if static_figs:
         for fig in static_figs:
             # 1) genera PNG bytes
             img_bytes = fig.to_image(format="png", width=800, height=400, scale=2)
             buf = BytesIO(img_bytes)
             # 2) crea l’Image flowable (adatta width/height come vuoi)
             img = Image(buf, width=16*cm, height=8*cm)
             story.append(img)
             story.append(Spacer(1, 0.5*cm))
        
    # 5) Build PDF and open
    doc.build(story, onFirstPage=footer, onLaterPages=footer)
    if sys.platform.startswith("win"):
        os.startfile(tmp_path)
    elif sys.platform == "darwin":
        subprocess.Popen(["open", tmp_path])
    else:
        subprocess.Popen(["xdg-open", tmp_path])