"""
PDF Reporting Module
--------------------

Provides functionality to generate structured PDF reports combining quantitative
portfolio risk metrics (e.g., VaR, ES, option positions) with interpretive text,
generated by a local LLM (e.g., via LM Studio).

This module is the final step in the risk pipeline — producing clean, formatted
outputs for clients, stakeholders, or internal documentation. Tables are styled
for clarity, and text is formatted using ReportLab components.

Usage Instructions
------------------
1. Ensure the ReportLab library is installed (`pip install reportlab`)
2. Call `open_report_as_pdf()` with:
   - a dict of metrics (e.g., {"VaR_95%": ..., "ES_99%": ...})
   - a Series of portfolio weights (for traceability)
   - a string containing LLM-generated interpretation
   - (optional) a list of options positions

Authors
-------
Niccolò Lecce, Alessandro Dodon, Marco Gasparetti

Created
-------
May 2025

Contents
--------
- open_report_as_pdf: Generate and export a complete PDF report for portfolio risk analysis
"""


#----------------------------------------------------------
# Packages
#----------------------------------------------------------
from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.units import cm
from reportlab.lib import colors
import os, sys
import datetime
import subprocess
from reportlab.platypus import Image
from io import BytesIO
import tempfile
from reportlab.lib.pagesizes import A4


#----------------------------------------------------------
# PDF Report Function
#----------------------------------------------------------
def open_report_as_pdf(metrics,
                       weights,
                       interpretation,
                       opt_list,
                       backtest_results,
                       static_figs = None):
    """
    Generate a styled PDF report of VaR/ES metrics, option positions, backtest results,
    and LLM interpretation, then open it in the system's default viewer.

    Parameters
    ----------
    metrics : dict
        Dictionary of risk metrics, e.g. {"Asset-Normal VaR": 123.45, "Monte Carlo ES": 67.89, ...}.
    weights : pandas.Series
        Series of portfolio weights, indexed by ticker.
    interpretation : str
        Plain-text analysis produced by the LLM, split by paragraphs on double newlines.
    opt_list : list of dict
        List of option position dicts, each containing keys:
        "under", "type", "contracts", "multiplier", "qty", "K", "T", "sigma", "r", "asset_index".
    backtest_results : pandas.DataFrame
        DataFrame of backtest summary, indexed by model name, with columns:
        ["Violations", "Violation Rate", "Kupiec p-value",
         "Christoffersen p-value", "Joint p-value"].
    static_figs : list of plotly.Figure, optional
        List of static figures to include (converted to PNG) at the end of the report.
        Defaults to None.

    Returns
    -------
    None
        Writes PDF to a temporary file and launches it with the default system viewer.
    """
    # Create a temporary PDF file
    fd, tmp_path = tempfile.mkstemp(suffix=".pdf")
    os.close(fd)

    # Set up the document
    doc = SimpleDocTemplate(
        tmp_path, pagesize=A4,
        rightMargin=2*cm, leftMargin=2*cm,
        topMargin=2*cm, bottomMargin=2*cm
    )

    # Define styles
    styles = getSampleStyleSheet()
    styles.add(ParagraphStyle("RptTitle", fontName="Times-Roman", fontSize=24,
                              alignment=TA_CENTER, spaceAfter=12))
    styles.add(ParagraphStyle("SectHead", fontName="Times-Roman", fontSize=18,
                              spaceAfter=6))
    styles.add(ParagraphStyle("BodyTxt", fontName="Times-Roman", fontSize=12,
                              leading=14, spaceAfter=4))

    # Build the story
    story = []

    # Cover page
    story.append(Paragraph("Interpretation Report", styles["RptTitle"]))
    story.append(Paragraph(f"Date: {datetime.date.today():%d %B %Y}", styles["BodyTxt"]))
    story.append(Spacer(1, 0.7*cm))

    # VaR table
    story.append(Paragraph("VaR Metrics", styles["SectHead"]))
    story.append(Spacer(1, 0.5*cm))
    data_var = [["Metric", "Value"]]
    for k, v in metrics.items():
        if "VaR" in k and "ES" not in k:
            data_var.append([k, f"{v:,.2f}"])
    tbl_var = Table(data_var, colWidths=[8*cm, 6*cm])
    tbl_var.setStyle(TableStyle([
        ("BACKGROUND", (0,0), (-1,0), colors.lightgrey),
        ("ALIGN", (1,1), (-1,-1), "RIGHT"),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
        ("FONTNAME", (0,0), (-1,-1), "Times-Roman"),
    ]))
    story.append(tbl_var)
    story.append(Spacer(1, 0.7*cm))

    # ES table
    story.append(Paragraph("ES Metrics", styles["SectHead"]))
    story.append(Spacer(1, 0.5*cm))
    data_es = [["Metric", "Value"]]
    for k, v in metrics.items():
        if "ES" in k:
            data_es.append([k, f"{v:,.2f}"])
    tbl_es = Table(data_es, colWidths=[8*cm, 6*cm])
    tbl_es.setStyle(TableStyle([
        ("BACKGROUND", (0,0), (-1,0), colors.lightgrey),
        ("ALIGN", (1,1), (-1,-1), "RIGHT"),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
        ("FONTNAME", (0,0), (-1,-1), "Times-Roman"),
    ]))
    story.append(tbl_es)
    story.append(Spacer(1, 0.7*cm))

    # Option positions
    if opt_list:
        story.append(Paragraph("Option Positions", styles["SectHead"]))
        story.append(Spacer(1, 0.5*cm))
        data_opts = [["Type", "Underlying", "Quantity", "Strike", "Maturity (y)"]]
        for op in opt_list:
            data_opts.append([
                op["type"].upper(),
                op["under"],
                f"{op['qty']:.0f}",
                f"{op['K']:.2f}",
                f"{op['T']:.2f}"
            ])
        tbl_opts = Table(data_opts, colWidths=[3*cm,3*cm,3*cm,4*cm,3*cm])
        tbl_opts.setStyle(TableStyle([
            ("BACKGROUND", (0,0), (-1,0), colors.lightgrey),
            ("ALIGN", (2,1), (-1,-1), "RIGHT"),
            ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
            ("FONTNAME", (0,0), (-1,-1), "Times-Roman"),
        ]))
        story.append(tbl_opts)
        story.append(Spacer(1, 0.7*cm))

        # Backtest Results table
    story.append(Paragraph("Backtest Results", styles["SectHead"]))
    story.append(Spacer(1, 0.5*cm))

    # Create a header style that centers and wraps
    hdr_style = ParagraphStyle(
        "hdr", parent=styles["BodyTxt"],
        alignment=TA_CENTER,
        leading=12
    )

    # Header row as Paragraphs with explicit line‐breaks
    headers = [
        Paragraph("Model", hdr_style),
        Paragraph("Violations", hdr_style),
        Paragraph("Violation Rate", hdr_style),
        Paragraph("Kupiec\np-value", hdr_style),
        Paragraph("Christoffersen\np-value", hdr_style),
        Paragraph("Joint\np-value", hdr_style),
        Paragraph("Decision", hdr_style)        
    ]

    data_bt = [headers]
    for model, row in backtest_results.iterrows():
        data_bt.append([
            model,
            str(int(row["Violations"])),
            f"{row['Violation Rate']:.3f}",
            f"{row['Kupiec p-value']:.3f}",
            f"{row['Christoffersen p-value']:.3f}",
            f"{row['Joint p-value']:.3f}",
            row.get("Decision", "")               
        ])

    # Narrower columns for the long names
    col_widths = [3*cm, 2.5*cm, 3*cm, 2.5*cm, 3*cm, 2.5*cm, 3*cm]

    tbl_bt = Table(data_bt, colWidths=col_widths)
    tbl_bt.setStyle(TableStyle([
        ("BACKGROUND", (0,0), (-1,0), colors.lightgrey),
        ("ALIGN", (1,1), (-1,-1), "RIGHT"),
        ("GRID", (0,0), (-1,-1), 0.5, colors.grey),
        ("FONTNAME", (0,0), (-1,-1), "Times-Roman"),
    ]))
    story.append(tbl_bt)
    story.append(Spacer(1, 0.7*cm))

    # LLM Interpretation
    story.append(Paragraph("LLM Interpretation", styles["SectHead"]))
    for para in interpretation.split("\n\n"):
        story.append(Paragraph(para.replace("\n", " "), styles["BodyTxt"]))
        story.append(Spacer(1, 0.3*cm))


    # Footer callback
    def footer(canvas, doc):
        canvas.saveState()
        canvas.setFont("Times-Roman", 8)
        canvas.setFillColor("grey")
        canvas.drawCentredString(A4[0]/2, 1*cm,
                                 f"Page {doc.page} — Confidential")
        canvas.restoreState()

    if static_figs:
         for fig in static_figs:
             
            # generates PNG bytes
             img_bytes = fig.to_image(format="png", width=800, height=400, scale=2)
             buf = BytesIO(img_bytes)

            # create the Image flowable (adjust width/height as desired)
             img = Image(buf, width=16*cm, height=8*cm)
             story.append(img)
             story.append(Spacer(1, 0.5*cm))

    # Build PDF and open it
    doc.build(story, onFirstPage=footer, onLaterPages=footer)
    if sys.platform.startswith("win"):
        os.startfile(tmp_path)
    elif sys.platform == "darwin":
        subprocess.Popen(["open", tmp_path])
    else:
        subprocess.Popen(["xdg-open", tmp_path])